version: '3.8' # version to be compatible with docker swarm/stack deployments

services:
  web:
    image: registry.digitalocean.com/sad-containers/minitwit:latest
    deploy:
      replicas: 2
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      SIMULATOR_IP: ${SIMULATOR_IP}
    ports:
      - 4567:4567

  db:
    image: postgres:15
    deploy:
      mode: global # global mode to ensure one instance of the services is deployed
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST: ${DB_HOST}
    volumes:
      - pg_data:/var/lib/postgresql/data

  prometheus:
    image: registry.digitalocean.com/sad-containers/prometheus:latest #prom/prometheus:v3.2.1
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    volumes:
      - prometheus-data:/prometheus

  grafana:
    image: registry.digitalocean.com/sad-containers/grafana:latest #grafana/grafana:11.5.2
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_POSTGRES_USERNAME: ${GRAFANA_POSTGRES_USERNAME}
      GF_POSTGRES_PASSWORD: ${GRAFANA_POSTGRES_PASSWORD}
      GF_SMTP_ENABLED: ${GRAFANA_SMTP_ENABLED}
      GF_SMTP_HOST: ${GRAFANA_SMTP_HOST}
      GF_SMTP_USER: ${GRAFANA_SMTP_USER}
      GF_SMTP_PASSWORD: ${GRAFANA_SMTP_PASSWORD}
      GF_SMTP_SKIP_VERIFY: ${GRAFANA_SMTP_SKIP_VERIFY}
      GF_SMTP_FROM_NAME: ${GRAFANA_SMTP_FROM_NAME}
      GF_SMTP_FROM_ADDRESS: ${GRAFANA_SMTP_FROM_ADDRESS}
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - 3000:3000
  
  elasticsearch-setup:
    image: registry.digitalocean.com/sad-containers/elasticsearch-setup:latest  #elasticsearch-setup:8.17.3
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
      restart_policy:
        condition: none
    volumes:
      - elasticsearch-init:/data
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
      KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD}
      BEATS_SYSTEM_USERNAME: ${BEATS_SYSTEM_USERNAME}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD}

  elasticsearch:
    image: registry.digitalocean.com/sad-containers/elasticsearch:latest  #elasticsearch:8.17.3
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"    
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data:Z
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      node.name: elasticsearch
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m

  logstash:
    image: registry.digitalocean.com/sad-containers/logstash:latest #logstash:8.17.3
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    environment:
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
      LS_JAVA_OPTS: -Xms256m -Xmx256m

  kibana:
    image: registry.digitalocean.com/sad-containers/kibana:latest #kibana:8.17.3
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}

  filebeat:
    image: registry.digitalocean.com/sad-containers/filebeat:latest #docker.elastic.co/beats/filebeat:8.17.3
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    user: root
    command:
      - -e
      - --strict.perms=false
    volumes:
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD}
      BEATS_SYSTEM_USERNAME: ${BEATS_SYSTEM_USERNAME}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD}

volumes:
  pg_data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  elasticsearch-init:
