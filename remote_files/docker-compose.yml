version: '3.8' # version to be compatible with docker swarm/stack deployments

services:
  web:
    image: registry.digitalocean.com/sad-containers/minitwit:latest
    deploy:
      replicas: 2
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
    depends_on:
      - db
    ports:
      - "4567:4567"
    env_file:
      - .env

  db:
    image: postgres:15
    deploy:
      mode: global # global mode to ensure one instance of the services is deployed
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          # - "node.hostname==minitwit.manager"
          - "node.role==manager"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: minitwit
    volumes:
      - pg_data:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus:v3.2.1
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:11.5.2
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_POSTGRES_USERNAME=${GRAFANA_POSTGRES_USERNAME}
      - GF_POSTGRES_PASSWORD=${GRAFANA_POSTGRES_PASSWORD}
      - GF_SMTP_ENABLED=${GRAFANA_SMTP_ENABLED}
      - GF_SMTP_HOST=${GRAFANA_SMTP_HOST}
      - GF_SMTP_USER=${GRAFANA_SMTP_USER}
      - GF_SMTP_PASSWORD=${GRAFANA_SMTP_PASSWORD}
      - GF_SMTP_SKIP_VERIFY=${GRAFANA_SMTP_SKIP_VERIFY}
      - GF_SMTP_FROM_NAME=${GRAFANA_SMTP_FROM_NAME}
      - GF_SMTP_FROM_ADDRESS=${GRAFANA_SMTP_FROM_ADDRESS}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/alerting:/etc/grafana/provisioning/alerting
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/predefined-dashboards:/predefined-dashboards
    ports:
      - "3000:3000"

  # setup:
  #   build:
  #     context: elk/setup/
  #     args:
  #       ELASTIC_VERSION: ${ELASTIC_VERSION}
  #   deploy:
  #     replicas: 1
  #     update_config:
  #       delay: 10s
  #       order: start-first
  #     placement:
  #       constraints:
  #         - "node.hostname!=dbvm"
  #         - "node.role==manager"
  #   init: true
  #   volumes:
  #     - ./elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
  #     - ./elk/setup/lib.sh:/lib.sh:ro,Z
  #     - ./elk/setup/roles:/roles:ro,Z
  #   environment:
  #     ELASTIC_USERNAME: ${ELASTIC_USERNAME:-}
  #     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
  #     LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
  #     KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME:-}
  #     KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
  #     METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
  #     FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
  #     HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
  #     MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
  #     BEATS_SYSTEM_USERNAME: ${BEATS_SYSTEM_USERNAME:-}
  #     BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
  #   depends_on:
  #     - elasticsearch

  elasticsearch:
    image: elasticsearch:8.10.2
    build:
      context: elk/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"    
    volumes:
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch-data:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
    environment:
      node.name: elasticsearch
      ELASTIC_USERNAME: ${ELASTIC_USERNAME:-}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m

  logstash:
    image: logstash:8.10.2
    build:
      context: elk/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
    environment:
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      LS_JAVA_OPTS: -Xms256m -Xmx256m
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:8.10.2
    build:
      context: elk/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch

  # filebeat: # Uses another docker compose file to setup filebeat.
  #   extends:
  #     file: elk/filebeat/filebeat-compose.yml
  #     service: filebeat

# networks:
#   minitwit_network:
#     driver: overlay
#   minitwit_elk:
#     driver: bridge

volumes:
  pg_data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
