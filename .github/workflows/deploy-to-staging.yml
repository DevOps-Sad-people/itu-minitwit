---
name: Continuous Deployment Staging

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - develop
      - swarm
      - swarm-logging-fix


# env variables
env:
  DROPLET_NAME: "minitwit-staging"
  REGISTRY_NAME: "registry.digitalocean.com/sad-containers"
  SSH_USER: "root"
  SSH_HOST: "157.245.22.36" # refers to the reserved IP address of the droplet

# I've split the workflow into three jobs: build_and_push, test, and deploy.
# The three jobs makes it easy to see which part fails in the Github Actions UI.

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run tests
        run: docker compose -f docker-compose.testing.yml up --abort-on-container-exit --exit-code-from test

  build_and_push:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      # check rate limit for digital ocean
      - name: Check rate limit
        run: doctl account ratelimit --format Remaining

      # BUILD AND PUSH MINITWIT IMAGE
      - name: Build minitwit image & push if version incremented
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: minitwit
          CONTEXT_PATH: .
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}

      # BUILD AND PUSH PROMETHEUS IMAGE
      - name: Build prometheus image & push if version incremented
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: prometheus
          CONTEXT_PATH: ./prometheus
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}

      # BUILD AND PUSH GRAFANA IMAGE
      - name: Build grafana image & push if version incremented
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: grafana
          CONTEXT_PATH: ./grafana
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}

      # BUILD AND PUSH FILEBEAT IMAGE
      - name: Build filebeat image & push if changversion incremented
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: filebeat
          CONTEXT_PATH: ./elk/filebeat
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}

      # BUILD AND PUSH LOGSTASH IMAGE
      - name: Build logstash image & push if version incremented
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: logstash
          CONTEXT_PATH: ./elk/logstash
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}
      
      # BUILD AND PUSH ELASTICSEARCH SETUP IMAGE
      - name: Build elasticsearch setup image & push if version incremented
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: elasticsearch-setup
          CONTEXT_PATH: ./elk/elasticsearch/setup
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}

      # BUILD AND PUSH ELASTICSEARCH IMAGE
      - name: Build elasticsearch image & push if version incremented
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: elasticsearch
          CONTEXT_PATH: ./elk/elasticsearch
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}

      # BUILD AND PUSH KIBANA IMAGE
      - name: Build kibana image & push if version incremented
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: kibana
          CONTEXT_PATH: ./elk/kibana
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
        run: >
          ssh $SSH_USER@$SSH_HOST
          -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no
          'cd /minitwit; ./deploy.sh'
        env:
          SSH_USER: ${{ env.SSH_USER }}
          SSH_HOST: ${{ env.SSH_HOST }}
