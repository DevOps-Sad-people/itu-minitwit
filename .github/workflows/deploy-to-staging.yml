---
name: Continuous Deployment Staging

on:
  push:
    # Run workflow every time something is pushed to the develop branch
    branches:
      - develop

concurrency:
  group: deploy-to-staging
  cancel-in-progress: true

# env variables
env:
  REGISTRY_NAME: "registry.digitalocean.com/sad-containers"
  SSH_USER: "root"
  SSH_HOST: "157.245.22.36" # refers to the reserved IP address of the droplet

jobs:
  build-minitwit:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.set-tag.outputs.TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Setup TAG name for containers
        id: set-tag
        run: echo "TAG=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')" >> $GITHUB_OUTPUT

      # BUILD AND PUSH MINITWIT IMAGE
      - name: Build minitwit image
        run: |
          docker build -t ${{ env.REGISTRY_NAME }}/minitwit:${{ steps.set-tag.outputs.TAG }} .

      - name: Push minitwit image to DigitalOcean Container Registry
        run: |
          docker push ${{ env.REGISTRY_NAME }}/minitwit:${{ steps.set-tag.outputs.TAG }}

  test:
    runs-on: ubuntu-latest
    needs: build-minitwit
    env:
      TAG: ${{ needs.build-minitwit.outputs.TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Setup environment variables
        run: cp .env.test .env

      - name: Run Ruby Tests
        run: |
          docker compose -f docker-compose.github.yml run web rspec

      - name: Setup E2E Environment
        run: |
          docker compose -f docker-compose.github.yml up -d
          sudo apt-get update
          sudo apt-get install -y python3
          pip install -r simulator/requirements.txt -r requirements.txt

      - name: Install browser for E2E
        run: python3 -m playwright install --with-deps

      - name: Run your E2E tests
        run: pytest --tracing=retain-on-failure

      - name: Setup Simulator Environment
        run: |
          docker compose -f docker-compose.github.yml down -v
          docker compose -f docker-compose.github.yml up -d

      - name: Wait for the server to be ready
        run: |
          echo "Waiting for web service"
          for i in {1..100}; do
            if curl -s http://0.0.0.0:4567 > /dev/null; then
              echo "Web service is ready"
              exit 0
            fi
            echo -n "."
            sleep 0.2
          done
          echo "Web service did not become ready in time"
          docker logs minitwit
          exit 1

      - name: Run Simulator tests
        run: |
          cd simulator
          python3 minitwit_simulator_test.py http://0.0.0.0:4567 || (docker logs minitwit && exit 1)
  
  build-images:
    runs-on: ubuntu-latest
    needs: [build-minitwit, test]
    env:
      TAG: ${{ needs.build-minitwit.outputs.TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: "2"

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with longer-lived credentials
        run: doctl registry login --expiry-seconds 1200

      # BUILD AND PUSH PROMETHEUS IMAGE
      - name: Build prometheus image & push if changed
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: prometheus
          CONTEXT_PATH: ./prometheus

      # BUILD AND PUSH GRAFANA IMAGE
      - name: Build grafana image & push if changed
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: grafana
          CONTEXT_PATH: ./grafana

      # BUILD AND PUSH FILEBEAT IMAGE
      - name: Build filebeat image & push if changed
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: filebeat
          CONTEXT_PATH: ./elk/filebeat

      # BUILD AND PUSH LOGSTASH IMAGE
      - name: Build logstash image & push if changed
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: logstash
          CONTEXT_PATH: ./elk/logstash
      
      # BUILD AND PUSH ELASTICSEARCH SETUP IMAGE
      - name: Build elasticsearch setup image & push if changed
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: elasticsearch-setup
          CONTEXT_PATH: ./elk/elasticsearch-setup

      # BUILD AND PUSH ELASTICSEARCH IMAGE
      - name: Build elasticsearch image & push if changed
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: elasticsearch
          CONTEXT_PATH: ./elk/elasticsearch

      # BUILD AND PUSH KIBANA IMAGE
      - name: Build kibana image & push if changed
        run: ./.github/scripts/push_image_on_change.sh
        env:
          IMAGE_NAME: kibana
          CONTEXT_PATH: ./elk/kibana

  deploy:
    runs-on: ubuntu-latest
    needs: [build-minitwit, build-images]
    env:
      TAG: ${{ needs.build-minitwit.outputs.TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo -e "Host ${{ env.SSH_HOST }}\n\tStrictHostKeyChecking no\n\tIdentityFile ~/.ssh/id_ed25519" > ~/.ssh/config

      - name: Copy remote_files to server
        run: scp -r ./remote_files/* ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/minitwit

      - name: Deploy to server
        run: ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "cd /minitwit; ./deploy.sh ${{ env.TAG }}"
