input {
	beats {
		port => 5044
	}
}

filter {
  ruby {
    code => "
      labels = event.get('[docker][container][labels]') || {}

      if labels['com_docker_swarm_service_name']
        service = labels['com_docker_swarm_service_name']
        namespace = labels['com_docker_stack_namespace']
        service = service.sub(/^#{Regexp.escape(namespace)}_/, '')
        event.set('service', service)
      elsif labels['com_docker_compose_service']
        service = labels['com_docker_compose_service']
        event.set('service', service)
      end
    "
  }

  mutate {
    remove_field => ["docker", "agent", "host", "input", "log", "[event][original]"]
  }

  if [service] == "prometheus" {
    dissect {
      mapping => {
        "message" => "%{?timestamp} level=%{level} %{?rest}"
      }
    }

    if "_dissectfailure" not in [tags] and [level] in ["DEBUG", "INFO"] {
      drop {}
    }
  } else if [service] == "grafana" {
    dissect {
      mapping => {
        "message" => "%{?logger} %{?timestamp} level=%{level} %{?rest}"
      }
    }

    if "_dissectfailure" not in [tags] and [level] in ["debug", "info"] {
      drop {}
    }
  } else if [service] == "filebeat" {
    json {
      source => "message"
      target => "message_parsed"
    }

    if "_jsonparsefailure" not in [tags] {
      if [message_parsed][log.level] in ["debug", "info"] {
        drop {}
      } else {
        mutate {
          add_field => {
            "level" => "%{[message_parsed][log.level]}"
          }
        }

        mutate {
          replace => {
            "message" => "level=%{[message_parsed][log.level]} %{[message_parsed][message]}"
          }
        }

        mutate {
          remove_field => ["message_parsed"]
        }
      }
    }
  } else if [service] == "logstash" {
    dissect {
      mapping => {
        "message" => "[%{?timestamp}][%{level}]%{?rest}"
      }
    }

    if "_dissectfailure" not in [tags] {
      mutate {
        gsub => [
          "level", "\s+$", ""
        ]
      }
      if [level] in ["DEBUG", "INFO"] {
        drop {}
      }
    }
  } else if [service] == "elasticsearch-setup" {
    drop {}
  } else if [service] == "elasticsearch" {
    json {
      source => "message"
      target => "message_parsed"
    }

    if "_jsonparsefailure" not in [tags] {
      if [message_parsed][log.level] in ["DEBUG", "INFO"] {
        drop {}
      } else {
        mutate {
          add_field => {
            "level" => "%{[message_parsed][log.level]}"
          }
        }

        mutate {
          replace => {
            "message" => "level=%{[message_parsed][log.level]} %{[message_parsed][message]}"
          }
        }

        mutate {
          remove_field => ["message_parsed"]
        }
      }
    }
  } else if [service] == "kibana" {
    dissect {
      mapping => {
        "message" => "[%{?timestamp}][%{level}]%{?rest}"
      }
    }

    if "_dissectfailure" not in [tags] {
      mutate {
        gsub => [
          "level", "\s+$", ""
        ]
      }
      
      if [level] in ["DEBUG", "INFO"] {
        drop {}
      }
    }
  }
}


output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "logstash_internal"
		password => "${LOGSTASH_INTERNAL_PASSWORD}"
	}
}