version: '3.8' # version to be compatible with docker swarm/stack deployments

services:
  web:
    image: registry.digitalocean.com/sad-containers/minitwit:latest
    deploy:
      replicas: 2
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
    depends_on:
      - db
    ports:
      - "4567:4567"
    env_file:
      - .env

  db:
    image: postgres:15
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: minitwit
    volumes:
      - pg_data:/var/lib/postgresql/data

  prometheus:
    image: prometheus:v3.2.1 #registry.digitalocean.com/sad-containers/prometheus:latest
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    volumes:
      - prometheus-data:/prometheus
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml

  grafana:
    image: grafana:11.5.2 #registry.digitalocean.com/sad-containers/grafana:latest
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_POSTGRES_USERNAME=${GRAFANA_POSTGRES_USERNAME}
      - GF_POSTGRES_PASSWORD=${GRAFANA_POSTGRES_PASSWORD}
      - GF_SMTP_ENABLED=${GRAFANA_SMTP_ENABLED}
      - GF_SMTP_HOST=${GRAFANA_SMTP_HOST}
      - GF_SMTP_USER=${GRAFANA_SMTP_USER}
      - GF_SMTP_PASSWORD=${GRAFANA_SMTP_PASSWORD}
      - GF_SMTP_SKIP_VERIFY=${GRAFANA_SMTP_SKIP_VERIFY}
      - GF_SMTP_FROM_NAME=${GRAFANA_SMTP_FROM_NAME}
      - GF_SMTP_FROM_ADDRESS=${GRAFANA_SMTP_FROM_ADDRESS}
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    configs:
      - source: grafana_alert_rules
        target: /etc/grafana/provisioning/alerting/alert_rules.yaml
      - source: grafana_contact_points
        target: /etc/grafana/provisioning/alerting/contact_points.yaml
      - source: grafana_policies
        target: /etc/grafana/provisioning/alerting/policies.yaml
      - source: grafana_dashboard_provider
        target: /etc/grafana/provisioning/dashboards/dashboard-provider.yaml
      - source: grafana_postgres_datasource
        target: /etc/grafana/provisioning/datasources/postgres.yaml
      - source: grafana_prometheus_datasource
        target: /etc/grafana/provisioning/datasources/prometheus.yaml
      - source: grafana_minitwit_dashboard
        target: /predefined-dashboards/minitwit_dashboards.json

  elasticsearch:
    image: elasticsearch:8.17.3 #registry.digitalocean.com/sad-containers/elasticsearch:latest 
#    build:
#      context: elk/elasticsearch/
#      args:
#        ELASTIC_VERSION: ${ELASTIC_VERSION}
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"    
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
    environment:
      node.name: elasticsearch
      ELASTIC_USERNAME: ${ELASTIC_USERNAME:-}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_USERNAME: ${BEATS_SYSTEM_USERNAME:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    configs:
      - source: elasticsearch_entrypoint
        target: /entrypoint.sh
      - source: elasticsearch_lib
        target: /lib.sh
      - source: elasticsearch_role_filebeat_writer
        target: /roles/filebeat_writer.json
      - source: elasticsearch_role_heartbeat_writer
        target: /roles/heartbeat_writer.json
      - source: elasticsearch_role_logstash_writer
        target: /roles/logstash_writer.json
      - source: elasticsearch_role_metricbeat_writer
        target: /roles/metricbeat_writer.json
      - source: elasticsearch_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml

  logstash:
    image: logstash:8.17.3 #registry.digitalocean.com/sad-containers/logstash:latest
#    build:
#      context: elk/logstash/
#      args:
#        ELASTIC_VERSION: ${ELASTIC_VERSION}
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    volumes:
#      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
#      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
    environment:
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      LS_JAVA_OPTS: -Xms256m -Xmx256m
    configs:
      - source: logstash_config
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash_pipeline
        target: /usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:8.17.3 #registry.digitalocean.com/sad-containers/kibana:latest
#    build:
#      context: elk/kibana/
#      args:
#        ELASTIC_VERSION: ${ELASTIC_VERSION}
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    volumes:
#      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    configs:
      - source: kibana_config
        target: /usr/share/kibana/config/kibana.yml
    depends_on:
      - elasticsearch

  filebeat:
    image: filebeat:8.17.3 #registry.digitalocean.com/sad-containers/filebeat:latest
#    build:
#      context: elk/filebeat/
#      args:
#        ELASTIC_VERSION: ${ELASTIC_VERSION}
    deploy:
      replicas: 1
      update_config:
        delay: 10s
        order: start-first
      placement:
        constraints:
          - "node.hostname!=dbvm"
          - "node.role==manager"
    # Run as 'root' instead of 'filebeat' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
#      - ./elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_USERNAME: ${BEATS_SYSTEM_USERNAME:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    configs:
      - source: filebeat_config
        target: /usr/share/filebeat/filebeat.yml
    depends_on:
      - elasticsearch

# networks:
#   minitwit_network:
#     driver: overlay
#   minitwit_elk:
#     driver: bridge

volumes:
  pg_data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

configs:
  # GRAFANA
  grafana_alert_rules:
    file: ./grafana/alerting/alert_rules.yaml
  grafana_contact_points:
    file: ./grafana/alerting/contact_points.yaml
  grafana_policies:
    file: ./grafana/alerting/policies.yaml
  grafana_dashboard_provider:
    file: ./grafana/dashboards/dashboards-provider.yaml
  grafana_postgres_datasource:
    file: ./grafana/datasources/postgres.yaml
  grafana_prometheus_datasource:
    file: ./grafana/datasources/prometheus.yaml
  grafana_minitwit_dashboard:
    file: ./grafana/predefined-dashboards/minitwit_dashboards.json
  #PROMETHEUS
  prometheus_config:
    file: ./prometheus/prometheus.prod.yml
  #ELASTICSEARCH
  elasticsearch_entrypoint:
    file: ./elk/elasticsearch/setup/entrypoint.sh
  elasticsearch_lib:
    file: ./elk/elasticsearch/setup/lib.sh
  elasticsearch_role_filebeat_writer:
    file: ./elk/elasticsearch/setup/roles/filebeat_writer.json
  elasticsearch_role_heartbeat_writer:
    file: ./elk/elasticsearch/setup/roles/heartbeat_writer.json
  elasticsearch_role_logstash_writer:
    file: ./elk/elasticsearch/setup/roles/logstash_writer.json
  elasticsearch_role_metricbeat_writer:
    file: ./elk/elasticsearch/setup/roles/metricbeat_writer.json
  elasticsearch_config:
    file: ./elk/elasticsearch/config/elasticsearch.yml
  #FILEBEAT
  filebeat_config:
    file: ./elk/filebeat/config/filebeat.yml
  #KIBANA
  kibana_config:
    file: ./elk/kibana/config/kibana.yml
  #LOGSTASH
  logstash_config:
    file: ./elk/logstash/config/logstash.yml
  logstash_pipeline:
    file: ./elk/logstash/pipeline/logstash.conf









